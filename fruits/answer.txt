※これは解答用テキストファイルです。

■ログファイルから読み取ったフルーツの数を書いてください。
記入例）
1
2
3
4
5

あなたの解答）

3
6
3
5
4

■あなたが書いたコードの内容や工夫した点を簡潔に書いてください。



■あなたが書いたJavaのバージョンを書いてください。

1.8

■あなたが書いたコードそのものを貼り付けてください。適宜コメントも書いてください。


package io.github.mookjp.codeiq.countfruits;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 */
public class CountFruits {
    public static void main(String[] args) {
        try {
            Files.readAllLines(Paths.get(args[0]), Charset.defaultCharset()).stream()
                    .forEach(s -> System.out.println(new Counter(s).count()));
        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }
}

package io.github.mookjp.codeiq.countfruits;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 */
public class Counter {

    public String origText;

    public String[] delimiterList = {"(", "[", "{"};

    public Counter(String text) {
        origText = text;
    }

    public int count() {
        int totalCount = 0;
        for (String delimiter : delimiterList) {
            int groupCount = getGroupCount(origText, delimiter);
            totalCount = groupCount > totalCount ? groupCount : totalCount;
        }
        return totalCount;
    }

    public static String getBuddy(String delimiter) {
        if (delimiter.equals("[")) return "]";
        if (delimiter.equals("(")) return ")";
        if (delimiter.equals("{")) return "}";
        return null;
    }

    public static String getRegex(String delimiter) {
        String closeDelimiter = getBuddy(delimiter);

        return String.format("\\%s(.+?)\\%s", delimiter, closeDelimiter);
    }

    public int getGroupCount(String text, String delimiter) {
        Pattern pattern = Pattern.compile(getRegex(delimiter));
        Matcher matcher = pattern.matcher(text);

        int count = 0;
        if (matcher.find()) {
            int newCount = getGroupCount(matcher.group(1), delimiter);
            if (newCount > count) count = newCount;
        } else if (text.length() != origText.length()) {
            count = getFruitsCount(text);
        }
        return count;
    }

    public static int getFruitsCount(String text) {
        Pattern pattern = Pattern.compile("([a-z]+)");
        Matcher matcher = pattern.matcher(text);

        int count = 0;
        while(matcher.find()) {
            count++;
        }

        return count;
    }
}

package io.github.mookjp.codeiq.countfruits;

import org.junit.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

/**
 */
public class CounterTest {

    public final String TESTDATA1 = "{melon (()melon strawberry)][apple}";
    public final String TESTDATA2 = "strawberry (apple {apple }}}strawberry melon){apple strawberry (melon)[}";

    @Test
    public void getFruitCountTest() {
        assertThat(Counter.getFruitsCount(TESTDATA1), is(4));
        assertThat(Counter.getFruitsCount(TESTDATA2), is(8));
    }

    @Test
    public void getGroupCount() {
        Counter c = new Counter(TESTDATA1);
        assertThat(c.getGroupCount(TESTDATA1, "["), is(0));
        assertThat(c.getGroupCount(TESTDATA1, "("), is(0));
        assertThat(c.getGroupCount(TESTDATA1, "{"), is(4));

        assertThat(c.count(), is(4));
    }

    @Test
    public void getGroupCount2() {
        Counter c = new Counter(TESTDATA2);
        assertThat(c.getGroupCount(TESTDATA2, "["), is(0));
        assertThat(c.getGroupCount(TESTDATA2, "("), is(4));
        assertThat(c.getGroupCount(TESTDATA2, "{"), is(1));

        assertThat(c.count(), is(4));
    }
}

������͉𓚗p�T���v���t�@�C���ł��B

���uCSV�t�@�C�����v�Ɓu���̌ł܂�v�̐����J���}��؂�ŏ����Ă��������B
�uCSV�t�@�C�����v�Ɓu���̌ł܂�v��1�Z�b�g�Ƃ��A1�s��1�Z�b�g����s���ď����Ă��������B
�L���j
AegeanSea1.csv,1
AegeanSea2.csv,2
AegeanSea3.csv,3

AegeanSea1.csv,3
AegeanSea2.csv,59
AegeanSea3.csv,337

�����Ȃ����������R�[�h�̓��e��H�v�����_�ɂ��ĊȌ��ɐ������Ă��������B��������]���ΏۂƂȂ�܂��B




�����Ȃ���������Java�̃o�[�W�����������Ă��������B

1.8

�����Ȃ����������R�[�h���̂��̂�\��t���Ă��������B

package io.github.mookjp.codeiq.aegeansea;

import java.util.List;

/**
 * メインクラスです。
 * CSVファイルのパスを引数に取り、ファイル名と島の塊の数を出力します。
 */
public class AegeanSeaCounter {

    public static void main(String[] args) {
        for (String path : args) {
            List<int[]> isleList = new Reader(path).getIslePositions();
            int isleCount = Counter.countIsle(isleList);

            System.out.println(path + "," + isleCount);
        }
    }
}

package io.github.mookjp.codeiq.aegeansea;

import java.util.Arrays;
import java.util.List;

/**
 * 島の塊の数を数えるクラスです。
 */
public class Counter {

    /**
     * 島のある座標のListを引数にとり、塊と判定される島の数を返します。
     *
     * 島が上下左右にある場合、そこは船が通れないのでひとつの「島の固まり」として数えます。
     * 島が斜めに並んでいる場合、そこは船が通れるので、固まりとは数えません。
     *
     * @param isles 島のある座標のList
     * @return 島の塊と判定される島の数
     */
    public static int countIsle(List<int[]> isles) {
        int count = 0;

        if (isles.isEmpty()) return count;

        // 島の隣に島があったら、カウントします
        for (int[] pos : isles) {
            for (int[] targetPos: isles) {
                if (Arrays.equals(targetPos, up(pos)) ||
                        Arrays.equals(targetPos, down(pos)) ||
                        Arrays.equals(targetPos, right(pos)) ||
                        Arrays.equals(targetPos, left((pos)) )) {
                    count++;
                    break;
                }
            }
        }
        return count;
    }

    public static int[] up(int pos[]) {
        return new int[] {pos[0], pos[1] - 1};
    }

    public static int[] down(int pos[]) {
        return new int[] {pos[0], pos[1] + 1};
    }

    public static int[] right(int pos[]) {
        return new int[] {pos[0] + 1, pos[1]};
    }

    public static int[] left(int pos[]) {
        return new int[] {pos[0] - 1, pos[1]};
    }
}

package io.github.mookjp.codeiq.aegeansea;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * ファイルを読み込むクラスです。
 */
public class Reader {
    protected String filePath;

    public Reader(String filePath) {
        this.filePath = filePath;
    }

    /**
     * 島の座標を表す配列を含むListを返します。
     * 例） AegeanSea1.csvの場合、Listの内容は以下になります。
     * [1, 1]
     * [2, 1]
     * [1, 2]
     * [4, 3]
     * [3, 4]
     *
     * @return 島の座標を表す配列を含むList
     */
    public List<int[]> getIslePositions() {
        InputStream is = null;
        try {
            is = new FileInputStream(new File((this.filePath)));
        } catch (FileNotFoundException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            throw new RuntimeException(e);
        }

        // CSVをパースします。
        // CSV1行ごとのListを作成します。
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        List<String[]> list = br.lines()
                .map(s -> s.split(","))
                .collect(Collectors.toList());

        // 1が含まれる{x, y}を見つけたらListに追加します。
        List<int[]> isles = new ArrayList<>();
        int yCount = 0;
        for (String[] array : list) {
            int xCount = 0;
            for (String s : array) {
                if (s.equals("1")) {
                    int[] islePoint = {xCount, yCount};
                    isles.add(islePoint);
                }
                xCount++;
            }
            yCount++;
        }
        return isles;
    }

}

import io.github.mookjp.codeiq.aegeansea.Reader;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.hamcrest.CoreMatchers.hasItem;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

/**
 */
public class ReaderTest {
    @Test
    public void read() {
        String filePath = "src/test/resources/AegeanSea1.csv";

        // Execute
        List<int[]> list = new Reader(filePath).getIslePositions();

        assertThat(list, hasItem(new int[] {1,1}));
        assertThat(list, hasItem(new int[] {2,1}));
        assertThat(list, hasItem(new int[] {1,2}));
        assertThat(list, hasItem(new int[] {4,3}));
        assertThat(list, hasItem(new int[] {3,4}));
    }
}

import io.github.mookjp.codeiq.aegeansea.Counter;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

/**
 */
public class CounterTest {
    @Test
    public void testCountIsle() throws Exception {
        List<int[]> list = new ArrayList<>();
        list.add(new int[] {1, 1});
        list.add(new int[] {2, 1});
        list.add(new int[] {1, 2});
        list.add(new int[] {4, 3});
        list.add(new int[] {3, 4});

        int count = Counter.countIsle(list);
        assertThat(count, is(3));
    }

    @Test
    public void upTest() {
       int[] upPos = Counter.up(new int[] {1, 1});
       assertThat(upPos, is(new int[] {1, 0}));
    }

    @Test
    public void leftTest() {
        int[] upPos = Counter.left(new int[] {1, 1});
        assertThat(upPos, is(new int[] {0, 1}));
    }
}

